%\VignetteEngine{knitr::knitr}
\documentclass{article}

\usepackage{tikz}
\usepackage{float}
\usepackage{url}

<<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
  BiocStyle::latex()
@ 




\begin{document}

\title{Segvis: A package for visualization of high throughput
  sequencing data along genomic segments}
\author{Rene Welch (\href{mailto:welch@stat.wisc.edu}{welch@stat.wisc.edu}) and S\"{u}nd\"{u}z Kele\c{s} (\href{mailto:welch@stat.wisc.edu}{keles@stat.wisc.edu})   \\
  Department of Statistics, University of Wisconsin - Madison \\
  Madison, WI} 
\date{April 2015}

\maketitle

\tableofcontents


\section{Overview}
\label{sec:overview}

This vignette provides an introduction to the visualization of
sequencing data by using the \Rpackage{Segvis}
package. The minimum input to the package includes:

\begin{enumerate}

\item Coordinates for regions of interest.

\item One or more bam files of aligned read data (e.g. from ChIP-seq
  experiments).

\end{enumerate}

\Rpackage{Segvis} provides different tools to summarize and visualize
these data, including but not limited to the following tasks:

\begin{itemize}

\item Extract read data of specified input regions.

\item Plot data from different files (conditions) accross the same set
  of regions, e.g. peak plots for (SET or PET) ChIP-seq.

\item Calculate and plot statistics(e.g. mean, median, variace, etc.)
  over a window around biologically meaningful coordinates (TSS, TFBS,
  etc.)

\item Subset this regions according to user defined annotations.

\item Plot the heatmap of signal curves accross regions separated by
  annotation.
\end{itemize}

\section{How to use \Rpackage{Segvis}?}
\label{sec:howto}

The package can be loaded with the command:

<<load,eval=FALSE>>=

  library(Segvis) 

@

<<real_load,include=FALSE,echo=FALSE,eval=TRUE>>=

  library(devtools)
  load_all("../")

@

Different visualization of the data is done by the use of three
following classes \Robject{segvis}, \Robject{segvis\_block} and
\Robject{segvis\_block\_list}. The first one is used to store the reads
for a given bam file, the second is the one used to interact with the
data and the third one is simply a list made exclusively of
\Robject{segvis\_block} objects.

\subsection{Building a set of regions for \Rpackage{Segvis}}
\label{subsec:regions}

The minimum input for the package includes:

\begin{enumerate}

\item Coordinates for regions of interest.

\item One or more bam files of aligned read data (e.g. from ChIP-seq
  experiments).

\end{enumerate}

The coordinates may be obtained by several means: Visual exploration
in the genome browser, calling peaks from a ChIP-seq experiment,
etc. To use \Rpackage{Segvis} it is necessary to load the regions of
interest into a \Robject{segvis} object by formatting them as a
\Rclass{GRanges} object.

For example, if the peaks are saved in a \textbf{narrowPeak} file
format\footnote{A description of several common file formats is given
  in \url{https://genome.ucsc.edu/FAQ/FAQformat.html}}, then we can
load it into \R{} by using:
 
<<peaks_file,include=TRUE,echo=TRUE,eval=TRUE>>=

  peaks_file = "../inst/extdata/peaks/encode_K562_Ctcf_peaks_first3chr.narrowPeak"
  ctcf_peaks = read.table(peaks_file)
  head(ctcf_peaks,15)

@ 

Then to convert it into a \Rclass{GRanges} object we can use:

<<gr_peaks,include=TRUE,echo=TRUE,eval=TRUE>>=

  K = 2000
  ctcf_gr = GRanges(seqnames = ctcf_peaks$V1,
    ranges = IRanges(start = ctcf_peaks$V2,
      end = ctcf_peaks$V3),strand = "*")
  ctcf_gr = ctcf_gr[order(ctcf_peaks$V7,decreasing=TRUE)[1:K]]
  ctcf_gr

@ 

A complete description of the meaning of each column in the peaks file
is given in \url{https://genome.ucsc.edu/FAQ/FAQformat.html#format12}.
Using the signal values (on the 7th column), we are going to consider
the top \Sexpr{K} peaks.


\subsection{Creating a \Robject{segvis} object}
\label{subsec:create}

To create a \Rclass{segvis} object, it is necessary to specify the
following parameters:

\begin{itemize}
\item \Rcode{name} - The name of the \Robject{segvis} object.

\item \Rcode{regions} - The regions to be loaded, in our case
  those are \Rcode{ctcf\_gr}.

\item \Rcode{file} - The file were the reads of the experiment
  are stored.

\item \Rcode{maxBandwidth} - The upper bound of all the possible
  bandwidths used to smooth the coverage plots when creating a
  \Robject{segvis\_block} object.

\item \Rcode{fragLen} - The fragment length used to extend the
  fragment reads. If it is defined as zero, then it would use the
  original read widths.

\item \Rcode{chr} - The chromosomes for which the \Robject{segvis}
  object is defined. There are a couple of predefined cases as 'human'
  or 'mouse' to automatically consider all chromosomes in those
  genomes.

\item \Rcode{isPET} - A logical indicator if the reads of the
  experiment are paired-ended. In this case, the \Rcode{fragLen}
  parameter is ignored.
\end{itemize}

<<parameters_segvis , include=TRUE,echo=TRUE,eval=TRUE, warning=FALSE>>=
  
  ctcf = Segvis(name = "ctcf_peaks",
    file = "../inst/extdata/reads/encode_K562_Ctcf_first3chr_Rep1.sort.bam",
    maxBandwidth = 101,fragLen = 200,isPET = FALSE,
    chr = c("chr1","chr2","chr3"))                 
  regions(ctcf) = ctcf_gr
  ctcf                 

@ 

\subsection{Creating \Robject{segvis\_block} object}
\label{subsec:cover}

\Rpackage{Segvis} allows the use of several cores by using the
parameter \Rcode{mc}, which specifies the number of cores used by
parallel processing. To create a \Robject{segvis\_block} object it is
necessary to follow a series of steps:

<<segvis_block , include=TRUE,echo=TRUE,eval=TRUE,message=FALSE>>=
 
  ctcf = loadReads(ctcf, mc = 24)
  ctcf = matchReads(ctcf,mc = 24)
  ctcf = getCoverage(ctcf,mc = 24)
  ctcf_block = Segvis_block(ctcf,bw = 1,mc = 24)
  
@ 

To obtain the number of reads considered in an experiment:

<<countReads,include=TRUE,echo=TRUE,eval=TRUE>>=

  ctcf_reads = countReads(ctcf)
  ctcf_reads
  
@ 

In order to visually compare the enrichment level of more than one
experiments it is necessary to normalize the experiment, which
\Rpackage{Segvis} allows to do, by using:

<<normalize,include=TRUE,echo=TRUE,eval=TRUE>>=

  normConst(ctcf_block) = ctcf_reads
  ctcf_block = normalize(ctcf_block)
  
@ 

\section{Some examples}
\label{sec:examples}

\subsection{Plotting different marks accross specific peaks}
\label{sec:marks}

Using the same peaks as before. We are going to create a
\Robject{segvis\_block} for two additional marks, and plot all three
marks the top 3 peaks, therefore we need to build two new
\Robject{segvis\_block} objects:

<<new_marks,include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  h3k27ac = Segvis(name = "h3k27ac",
    file = "../inst/extdata/reads/encode_K562_H3k27ac_first3chr.sort.bam",
    maxBandwidth = 101,fragLen = 200,isPET = FALSE,
    chr = c("chr1","chr2","chr3"))
  regions(h3k27ac) = ctcf_gr

  h3k27ac = loadReads(h3k27ac, mc = 24)
  h3k27ac = matchReads(h3k27ac,mc = 24)
  h3k27ac = getCoverage(h3k27ac,mc = 24)
  h3k27ac_block = Segvis_block(h3k27ac,bw = 1,mc = 24)

  h3k4me1 = Segvis(name = "h3k4me1",
    file = "../inst/extdata/reads/encode_K562_H3k4me1_first3chr.sort.bam",
    maxBandwidth = 101,fragLen = 200,isPET = FALSE,
    chr = c("chr1","chr2","chr3"))
  regions(h3k4me1) = ctcf_gr

  h3k4me1 = loadReads(h3k4me1, mc = 24)
  h3k4me1 = matchReads(h3k4me1,mc = 24)
  h3k4me1 = getCoverage(h3k4me1,mc = 24)
  h3k4me1_block = Segvis_block(h3k4me1,bw = 1,mc = 24)
                 
@ 

When sequencing data from different samples are considered together,
they are often normalized to account for differences in the sequencing
depths. The \Rcode{normalize} function provides normalization
functionalities. The default to to scale all the samples to 1M
reads. 

<<block_list,include=TRUE,echo=TRUE,eval=TRUE,message =FALSE,warning=FALSE>>=

  h3k27ac_reads = countReads(h3k27ac)  
  normConst(h3k27ac_block) = h3k27ac_reads
  h3k27ac_block = normalize(h3k27ac_block)

  h3k4me1_reads = countReads(h3k4me1)                 
  normConst(h3k4me1_block) = h3k4me1_reads
  h3k4me1_block = normalize(h3k4me1_block)

  block_list = Segvis_block_list(ctcf_block,h3k27ac_block,h3k4me1_block)
  names(block_list) = c("ctcf","h3k27ac","h3k4me1")
                                   
@  

Then we can visualize all three marks over one regions by using the
\Rcode{plot\_profiles} function:

<<include=TRUE,echo=TRUE,eval=TRUE>>=

  rstart = start(ctcf_gr)[1]
  rend = end(ctcf_gr)[1]
  chr = as.character(seqnames(ctcf_gr)[1])
  iden = function(x)x  
  
  p1 = plot_profiles(block_list,condition = seqnames == chr & start == rstart,
    coord = rstart:rend,FUN = iden,mc=24)
                 
@ 

The output of \Rcode{plot\_profiles} is a \Robject{ggplot} object,
which we can modify it to obtains better looking plots.

<<include=TRUE,eval=TRUE,echo=TRUE,warning=FALSE,message=FALSE>>=

  p2 = p1 + facet_grid(condition~.,scales = "free_y")
  p3 = p2 + scale_colour_brewer(palette = "Dark2")+theme(legend.position = "none")

@ 

\begin{figure}[H]
  \centering
<<include=TRUE,eval=TRUE,echo=FALSE,out.width='4.6cm',out.height='4cm',fig.show='hold'>>=

  p1
  p2
  p3            

@   

\caption{Initial use to plot the first Ctcf peak with all three marks
  (Ctcf, H3k27ac and H3k4me1). From left to right: \Rcode{p1},
  \Rcode{p2} and \Rcode{p3}.}
\end{figure}

\subsection{Finding the summit of a specific mark's peaks}
\label{sec:summit}

One of the functions of \Rpackage{Segvis} is to calculate and plot
statistics over a window around biologically meaningful coordinates
like TSS, TFBS, etc. This coordinates are not always available,
therefore \Rpackage{Segvis} allows to find the summits of peaks formed
by a collection of genomic regions and fragment reads. 

In subsection \ref{subsec:cover}, we built the \Rcode{ctcf} object
which contains both regions and fragment reads, we can find the summit
by using the \Rcode{findSummit}, and then ``add'' it to the
\Robject{segvis\_block}'s regions:

<<summits,include=TRUE,echo=TRUE,eval=TRUE,message=FALSE>>=

  summits = findSummit(ctcf,bw=1,mc=24)
  ctcf_block= addColumn(ctcf_block,name="summit",col=summits)
  ctcf_block
                    
@ 


\subsection{Summarizing the coverage for a set of same width regions}
\label{subsec:summary}

Another functionality of \Rpackage{Segvis} is to calculate and plot
statistics(e.g. mean, median, variace, etc.)  over a window around
biologically meaningful coordinates (TSS, TFBS, etc.), for which we
are going to consider the summits that we found as those coordinates:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  window_ext = 500
  new_start = summits - window_ext
  new_end = summits + window_ext
  new_regions = GRanges(seqnames = seqnames(ctcf_gr),
    ranges = IRanges(start = new_start,end = new_end),strand ="*")
  str(width(new_regions))            

  regions(ctcf) = new_regions
  regions(h3k27ac) = new_regions
  regions(h3k4me1) = new_regions
  all_segvis = list("ctcf"=ctcf,"h3k27ac"=h3k27ac,"h3k4me1"=h3k4me1)
            
@ 

We are going to create a new \Robject{segvis\_block\_list} based on
the new regions, for which we can apply the same methods
\Rcode{loadReads}, \Rcode{matchReads}, \Rcode{getCoverage} and
\Rcode{Segvis\_block} to build it. This time, we are going to use two
functions to apply all methods together:

<<new_profiles,include=TRUE,echo=TRUE,eval=TRUE,warning=FALSE,message=FALSE>>=

  do_all <- function(segvis_obj,bw,mc)
  {
    segvis_obj = loadReads(segvis_obj,mc = mc)
    segvis_obj = matchReads(segvis_obj,mc = mc)
    segvis_obj = getCoverage(segvis_obj,mc = mc)
    out = Segvis_block(segvis_obj,bw = bw , mc = mc)
    return(out)     
  }

  all_segvis_blocks = lapply(all_segvis,do_all,bw = 1, mc = 24)
  nreads = c(ctcf_reads,h3k27ac_reads,h3k4me1_reads)

  assign_and_normalize <- function(segvis_bl_obj,nreads)
  {
    normConst(segvis_bl_obj) = nreads
    segvis_bl_obj = normalize(segvis_bl_obj)
    return(segvis_bl_obj)    
  }
            
  all_segvis_blocks = mapply(assign_and_normalize,
    all_segvis_blocks,nreads,SIMPLIFY=FALSE)
  all_segvis_blocks = Segvis_block_list(all_segvis_blocks)
  names(all_segvis_blocks) = names(all_segvis)
  
@ 

In this case, we have again \Sexpr{K} regions with the same width of
$m = \Sexpr{2* window_ext + 1}$, i.e. we can think it as a matrix of
$K \times m$ and to analize it we can apply the same function to all
column vectors of this matrix:

<<include=TRUE,echo=TRUE,eval=TRUE,warning=FALSE,message=FALSE>>=

  q1 = plot_profiles(all_segvis_blocks,FUN = mean,mc = 24,
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("mean normalized counts")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)
            
  q2 = plot_profiles(all_segvis_blocks,FUN = median,mc = 24,
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("median normalized counts")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)    
                  
@ 

We can even use functions created in the moment, the only need to take
a vector argument and return a 1 - dimensional value.

<<include=TRUE,echo = TRUE,eval = TRUE,warning = FALSE,message = FALSE>>=

  varlog <- function(x)var(log(1 + x))
            
  q3 = plot_profiles(all_segvis_blocks,FUN = varlog,mc = 24,
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("variance of log( 1 + normalized counts)")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)

@ 


\begin{figure}[H]
  \centering
<<include=TRUE,eval=TRUE,echo=FALSE,out.width='4.6cm',out.height='4cm',fig.show='hold'>>=

  q1
  q2
  q3            

@ 

  \caption{Mean, median and varlog profiles of all three marks
    (Ctcf,H3k27ac and H3k4me1) across the first \Sexpr{K} Ctcf peaks}
\label{fig2}
\end{figure}

Another of \Rpackage{Segvis} functionalities is to calculate the data
without generating the plot by the use of the \Rcode{plot\_data}
function, which uses the same arguments as \Rcode{plot\_profiles}:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  # x is the genomic coordinates or distance to summit in thise case
  # y is the normalized counts
  # 1001 x 3 conditions = 3003 rows (in table below)
  new_data1 = plot_data(all_segvis_blocks,FUN = mean,trim = .1,mc = 24,
    coord = -window_ext:window_ext)
  new_data2 = plot_data(all_segvis_blocks,FUN = median,mc = 24,
    coord = -window_ext:window_ext)            
  new_data1
  
@ 

And we can use this \Rcode{data.table} into previously defined plot:

<<include=TRUE,echo=TRUE,eval=TRUE,warning=FALSE,message=FALSE>>=

  p4 = p3 %+% new_data1 + ylab("average normalized counts")
  p5 = p3 %+% new_data2 + ylab("median normalized counts")
             
@ 

\begin{figure}[H]
  \centering
<<include=TRUE,eval=TRUE,echo=FALSE,out.width='4.6cm',out.height='4cm',fig.show='hold'>>=

  p4
  p5            

@   

\caption{Mean and median coverage plot, by using a previously defined
  \Rcode{ggplot} object}
\end{figure}


\subsection{Subsetting and exploring the data with respect to user
  defined annotations}
\label{subsec:subset}

\Rpackage{Segvis} have methods to explore the data too. Lets consider
as before that we want to explore the top \Sexpr{K} Ctcf peaks, for
which we already pre-processed a \Rcode{segvis\_block\_list} made with
Ctcf, H3k27ac and H3k4me1 fragment reads. Now, we want to explore this
set of peaks respect to additional annotation information as to wheter
this peaks overlap with Dnase accesible regions.

We read the Dnase hypersensitive sites from a file, and convert it to
a \Rcode{GRanges} object:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  dnase_file = "../inst/extdata/peaks/encode_K562_dnase_openChrom_first3chr.narrowPeak"
  list.files("../inst/extdata/peaks/")
  dnase_sites = read.table(dnase_file)
  dnase_gr = GRanges(seqname = dnase_sites$V1,
    ranges = IRanges(start = dnase_sites$V2,end = dnase_sites$V3),
    strand = "*")
 dnase_gr

@ 

We count the number of overlaps between the Dnase hypersensitive sites
and the top \Sexpr{K} Ctcf peaks and add those columns to the
\Rcode{segvis\_block\_list} we calculated in \label{subsec:summary}:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  nr_overlaps = countOverlaps(regions(all_segvis_blocks[[1]]),dnase_gr)
  all_segvis_blocks = lapply(all_segvis_blocks,
    addColumn,name = "dnase_overlaps",col =nr_overlaps)
  all_segvis_blocks[[1]]
                          
@ 

Then we can \Rcode{subset} the data based on queries based on that
annotation, for example:

<<subset_example,include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  ctcf_subset = subset(all_segvis_blocks[[1]],dnase_overlaps > 0)
  ctcf_subset
  cover_table(ctcf_subset)
  
@ 

Furthermore we can recreate the plots of figure \ref{fig2} for the
Ctcf peaks that overlap Dnse hypersensitive sites:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  
  s1 = plot_profiles(all_segvis_blocks,FUN = mean,mc = 24,
    condition = dnase_overlaps > 0 ,    
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("mean normalized counts")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)
            
  s2 = plot_profiles(all_segvis_blocks,FUN = median,mc = 24,
    condition = dnase_overlaps > 0 ,    
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("median normalized counts")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)

  s3 = plot_profiles(all_segvis_blocks,FUN = varlog,mc = 24,
    condition = dnase_overlaps > 0 ,
    coord = -window_ext:window_ext)+xlab("distance to summit")+
    ylab("variance of log( 1 + normalized counts)")+
    scale_color_brewer(guide = guide_legend(title = "condition"),palette = "Dark2")+
    theme(legend.position = "top")+geom_vline(xintercept=0,linetype= 2)
                       
@ 

\begin{figure}[H]
  \centering

<<include=TRUE,eval=TRUE,echo=FALSE,out.width='4.6cm',out.height='4cm',fig.show='hold'>>=

  s1
  s2
  s3

@ 

\caption{Mean, median and varlog profiles of all three marks
  (Ctcf,H3k27ac and H3k4me1) across the first \Sexpr{K} Ctcf peaks
  that overlap with Dnse hypersentive sites}
  \label{fig4}
\end{figure}

Furthermore, we can use the \Rcode{plot\_data} method to build more
complicated figures. For example:

<<include=TRUE,echo=TRUE,eval=TRUE,message=FALSE,warning=FALSE>>=

  mean_overlap_data = plot_data(all_segvis_blocks,FUN = mean,mc = 24,
    condition = dnase_overlaps > 0,
    coord = -window_ext:window_ext)
  mean_comp_data = plot_data(all_segvis_blocks,FUN = mean,mc = 24,
    condition = dnase_overlaps ==  0,
    coord = -window_ext:window_ext)
  new_data = rbind(mean_overlap_data[,overlap:="yes"],
    mean_comp_data[,overlap:="no"])
  fancy_plot = ggplot(new_data,aes(x,y,colour = condition))+geom_line(size=1.1)+
    facet_grid(overlap~.,scales = "free_y")+theme(legend.position = "top")+
    ggtitle("DHS overlaps")+geom_vline(xintercept = 0,linetype=2,size=1.1)+
    xlab("distance to summit")+ylab("average coverage")+
    scale_color_brewer(palette = "Set1")
                            
@ 

\begin{figure}[H]
  \centering
<<include=TRUE,eval=TRUE,echo=FALSE,out.width='6cm',out.height='5cm',fig.show='hold'>>=
  fancy_plot
@   
\caption{Average coverage of Ctcf, H3k27ac and H3k4me1 over Ctcf peaks
  overlapping with Dnase Hypersensitive Sites(DHS)}
\end{figure}




% \section{Some examples}

% \subsection{Visualizing simple peak plots}


% ...

% \subsection{Calculating the average coverage for a set of same width
%   regions}

% Now it is possible to create the \Robject{profileMatrix}. When
% calculating the \Robject{profileMatrix}, the user should add a
% \Robject{bandwidth} parameter, which is used to smooth the coverage
% curves for each peak. To avoid innecessary repetitions of the previous
% 3 steps for different bandwidths, a parameter called
% \Robject{maxBandwidth} was added, thus it is possible to compare the
% coverage curve for different bandwidths:

% << prof_mat,include=TRUE,echo=TRUE,eval=FALSE,tidy=TRUE>>=
%   ourProfileMatrix1 = ProfileMatrix(ourProfile,1,mc)
%   ourProfileMatrix2 = ProfileMatrix(ourProfile,51,mc)
%   ourProfileMatrix3 = ProfileMatrix(ourProfile,301,mc)
%   ourProfileList = ProfileMatrixList(ourProfileMatrix1,ourProfileMatrix2,ourProfileMatrix3)
%   names(ourProfileList) = c("1","51","301")
% @

% To compare the different averaged profile curves we do, in the second
% case we are using a parameter coord to set the genomic coordinates
% used:

% <<plot1,include=TRUE,echo=TRUE,eval=FALSE,tidy=TRUE>>=
%   p1 = plot.profiles(ourProfileList)
%   p2 = plot.profiles(ourProfileList,coord=-windowExt:windowExt)
% @

% <<plot1_load,include=FALSE,echo =FALSE,eval=TRUE>>=
%   load(file = file.path(rdatadir,"bw_figs.RData"))
% @

% \begin{figure}[h!]
%   <<plot1_both,include=TRUE,echo=FALSE,eval=TRUE,out.width='8 cm',fig.show = 'hold',fig.align='center'>>=
%   print(p1)
%   print(p2)
% @
% \caption{Profile plots smoothed using several bandwidths \label{example1}}
% \end{figure}

% Lets notice that we changed the coordinates from the left to the right
% plot in figure \ref{example1}. In the first case, we used the columns
% number in the matrix, while in the second we are using a relative
% distance to the middle of the regions.

% \subsection{Changing the \Rcode{trim} parameter}

% <<plot2_load,include = FALSE,echo = FALSE,eval=TRUE>>=
%   load(file=file.path(rdatadir,"trim_figs.RData"))
% @

% However, this is a simple example. A lot of times it's necessary to
% compare the curves generated under different conditions. For this
% example, we are going to calculate the coverage curves using different
% read samples but the same set of regions. The reads corresponds in
% this case to the following histones:

% \begin{itemize}
% \item H3k27ac
% \item H3k4me1
% \item H3k4me3
% \end{itemize}

% Just as in subsection \ref{cover} we apply the same methods to build
% our \Robject{profile} objects:

% <<load_reads2,cache=TRUE,include=TRUE,echo=TRUE,eval=FALSE,tidy=TRUE>>=
%   ourProfiles = mapply(Profile,names,files,MoreArgs =list("bam",maxBw,fl,""),SIMPLIFY=FALSE )
%   names(ourProfiles) = names
%   ourProfiles = lapply(ourProfiles,function(x,peaks_ctcf){
%     regions(x) = peaks_ctcf
%     return(x)},peaks_ctcf)
%   ourProfiles = lapply(ourProfiles,loadReads,mc)
%   ourProfiles = lapply(ourProfiles,matchReads,mc)
%   ourProfiles = lapply(ourProfiles,getCoverage,mc)
% @

% Then, for each sample we build the \Robject{profileMatrix}, and we
% gather in a \Robject{profileMatrixList}:

% <<buildmatrix, include=TRUE,echo=TRUE,eval=FALSE,tidy = TRUE>>=
%   ourMatrices = lapply(ourProfiles,ProfileMatrix,251,mc)
%   names(ourMatrices) = names
%   ourList_notScaled = ProfileMatrixList(ourMatrices)
% @

% For the case when the depth of our samples may be very different among
% them we can also normalize our curves as if they were generated by
% sample with a million reads:

% <<normalize,include=TRUE,echo=TRUE,eval=FALSE,tidy=TRUE>>=
%   ourMatrices = lapply(ourMatrices,normalize.matrix)
%   ourList = ProfileMatrixList(ourMatrices)
% @

% \label{matrices}

% And we plot them:

% <<include=TRUE,echo=TRUE,eval=FALSE,tidy=TRUE>>=
%   q1 = plot.profiles(ourList_notScaled,coord= -windowExt:windowExt)
%   q2 = plot.profiles(ourList,coord= -windowExt:windowExt)
% @

% \begin{figure}[h!]
% <<plot2_both,include=TRUE,echo=FALSE,eval=TRUE,out.width='8 cm',fig.show = 'hold',fig.align='center'>>=
%     print(q1)
%     print(q2)
% @
%   \caption{Profile plots of multiple samples with (right) and without
%     (left) normalizing the curves \label{example21}}
% \end{figure}

% Finally there maybe outlier curves for some of the regions. Therefore
% we can use the \Robject{trim} parameter:

% <<include=TRUE,echo=TRUE,eval=FALSE>>=
% q3 = plot.profiles(ourList,coord= -windowExt:windowExt,trim = 1)
% q4 = plot.profiles(ourList,coord= -windowExt:windowExt,trim = .25)
% @


% \begin{figure}[h!]
% <<plot3_both,include=TRUE,echo=FALSE,eval=TRUE,out.width='8 cm',fig.show = 'hold',fig.align='center'>>=
%   print(q3)
%   print(q4)
% @
% \caption{Averaged profile plots of multiple samples using the sample
%     median (left) and a 75\% trimmed mean (right) \label{example31}}
% \end{figure}


% \newpage
% \section{Modifying the appearance of the plots}

% By applying the \Rfunction{plot.profiles} method, the
% \Rpackage{Segvis} packages generates a \Robject{ggplot} object, thus
% the user can modify the output by using some their commands.

% For example we can change the colors of the curves, change the
% background, add a vertical line around the summit position or change
% the axis labels.

% \begin{figure}[h!]
% <<plot_format,include=TRUE,echo=TRUE,eval=TRUE,out.width='8 cm',fig.show ='hold',fig.align='center',tidy=TRUE>>=
%   q2 +theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Dark2')
%   q2 +theme_bw()+theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Accent')+
%     geom_vline(xintercept=0,linetype = 'dashed')+scale_linetype_manual(values = rep('solid',3))+
%     ylab('Nomalized signal')+xlab('Distance from summit')
% @
%  \caption{Format modification of average coverage plots}
% \end{figure}

% \section{Adding columns to matrix and subsetting}

% In the previous examples, we explore the plotting possibilities of
% \Rpackage{Segvis}. However, \Rpackage{Segvis} have also methods
% designed to explore the data. Consider a normalized
% \Robject{profileMatrixList} generated as in \ref{matrices}, then for
% each \Robject{profileMatrix} we can add a column as follows:

% <<include=TRUE,echo=TRUE,eval=FALSE>>=
%   ourList = lapply(ourList,function(x,dnase_regions){
%     regions(x)$dnase = countOverlaps(regions(x),dnase_regions)
%     return(x)},dnase_regions)
% @

% where \Rcode{countOverlaps} is a method from
% \Biocpkg{GenomicRanges}. In this case, we are obtaining the number of
% overlaps of each peak in \Rcode{regions(ourList[[i]])} with a
% \Robject{GRanges} object containing dnase sensitive regions in the
% first 3 chromosomes of the human genome. For this example, we added
% another annotation element as the number of overlaps between our peaks
% and Pol2b peaks. We can subset a \Robject{profileMatrix} using the method
% \Rcode{subset.pm} or directly plot the average coverage curves as:

% <<include=TRUE,echo=TRUE,eval = FALSE,tidy=TRUE>>=
%   p = plot.profiles(ourMatrices,coord = -windowExt:windowExt)
%   p1 = plot.profiles(ourMatrices,coord = -windowExt:windowExt,condition = dnase > 0 & pol2b > 0)
%   p2 = plot.profiles(ourMatrices,coord = -windowExt:windowExt,condition = dnase > 0 & pol2b == 0)
%   p3 = plot.profiles(ourMatrices,coord = -windowExt:windowExt,condition = dnase == 0 & pol2b > 0)
% @

% <<include=FALSE,echo=FALSE,eval=TRUE>>=
%   load(file = file.path(rdatadir,"subset_figs.RData"))
% @


% \begin{figure}[H]
%   \centering
%   <<plot_subset1,include=TRUE,echo=FALSE,eval=TRUE,out.width='8 cm',fig.show ='hold',fig.align='center',tidy=TRUE>>=
%   p +theme_bw()+theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Dark2')+
%     geom_vline(xintercept=0,linetype = 'dashed')+scale_linetype_manual(values = rep('solid',4))+
%     ylab('Nomalized signal')+xlab('Distance from summit')+ggtitle('Without subsetting')
%   p1 +theme_bw()+theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Dark2')+
%     geom_vline(xintercept=0,linetype = 'dashed')+scale_linetype_manual(values = rep('solid',4))+
%     ylab('Nomalized signal')+xlab('Distance from summit')+ggtitle('Overlaps with Dnase sensitive regions and Pol2b peaks')
%   p2 +theme_bw()+theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Dark2')+
%     geom_vline(xintercept=0,linetype = 'dashed')+scale_linetype_manual(values = rep('solid',4))+
%     ylab('Nomalized signal')+xlab('Distance from summit')+ggtitle('Only overlaps with Dnase sensitive regions')
%   p3 +theme_bw()+theme(legend.position = 'bottom')+scale_color_brewer(palette = 'Dark2')+
%     geom_vline(xintercept=0,linetype = 'dashed')+scale_linetype_manual(values = rep('solid',4))+
%     ylab('Nomalized signal')+xlab('Distance from summit')+ggtitle('Only overlaps with Pol2b peaks')
%   @
% \caption{Coverage mean plot for several subsets}
% \end{figure}


% \newpage
% \appendix



% \section{Converting from extended bed format to a \Robject{GRanges}
%   object}

% \label{gr1}

% For this example we are going to read from a {\bf bed} file, convert
% it to \Robject{GRanges} and save it as \file{data/peaks.RData}.

% <<convert,include=TRUE,echo=TRUE,cache=TRUE,eval=TRUE,tidy=TRUE>>=
% bed_content = read.table(file = "../inst/extdata/encode_K562_Ctcf_peaks_first3chr.narrowPeak",stringsAsFactors=FALSE)
% head(bed_content)
% @

% The {\bf bed} files are going to be loaded as a table with 10 columns,
% where the first column is the chromosome, the second the start and the
% third column the end of the region. It may be of interest that in the
% case of {\bf narrowPeak} format, the 10th column is the number of bp
% to the right of the start position where the summit of the peak is
% located.

% <<convert2,include=TRUE,echo=TRUE,cache=TRUE,eval=TRUE,tidy=TRUE>>=
%   peaks_ctcf = GRanges(seqnames = bed_content[,1],
%     ranges =IRanges(start=bed_content[,2],end =bed_content[,3]),strand = '*')
%   peaks_ctcf$summit = start(peaks_ctcf) + bed_content[,10]
%   save(list = "peaks_ctcf",file = "../data/peaks_ctcf.RData")
%   peaks_ctcf
% @


\section{SessionInfo}

<<sessionInfo,include=TRUE,echo =TRUE,eval=TRUE,results="asis">>=
  toLatex(sessionInfo())
@



% \section{Bibliography}



\end{document}
